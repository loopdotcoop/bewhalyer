// Generated by CoffeeScript 1.8.0
(function() {
  var $, $$, $el, Color, LoadedTexture, Pram, Shape, amendColors, amendShapes, c, construct, empty, fragmentObj, l, log, make, p, s, updateHash,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = function(html, append) {
    var $pre;
    if (append == null) {
      append = true;
    }
    $pre = $('#log');
    if ($pre && html) {
      if (append) {
        $pre.innerHTML += '\n' + html;
      } else {
        $pre.innerHTML = html;
      }
      $pre.scrollTop = $pre.scrollHeight;
      return console.log(html);
    }
  };

  $ = document.querySelector.bind(document);

  $$ = document.querySelectorAll.bind(document);

  make = function(tag, attr, inner) {
    var el, k, v;
    el = document.createElement(tag);
    for (k in attr) {
      v = attr[k];
      if ('_' !== k.substr(0, 1)) {
        el.setAttribute(k, v);
      }
    }
    if (inner) {
      el.innerHTML = inner;
    }
    return el;
  };

  empty = function(node) {
    var _results;
    _results = [];
    while (node.hasChildNodes()) {
      _results.push(node.removeChild(node.lastChild));
    }
    return _results;
  };

  fragmentObj = function() {
    var fragment, k, kv, v, _i, _len, _ref, _ref1;
    fragment = {};
    _ref = (window.location.hash.substr(1)).split('&');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      kv = _ref[_i];
      _ref1 = kv.split('_'), k = _ref1[0], v = _ref1[1];
      if (pram[k]) {
        fragment[k] = decodeURIComponent(v);
      }
    }
    return fragment;
  };

  updateHash = function(id) {
    var currentVal, defaultVal, hash, k, kv, out, v, _i, _len, _ref, _ref1;
    if (!config[id]) {
      return;
    }
    hash = {};
    defaultVal = config[id].value;
    currentVal = $el[id].value;
    _ref = (window.location.hash.substr(1)).split('&');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      kv = _ref[_i];
      _ref1 = kv.split('_'), k = _ref1[0], v = _ref1[1];
      k = decodeURIComponent(k);
      if (config[k]) {
        hash[k] = decodeURIComponent(v);
      }
    }
    if (defaultVal === currentVal) {
      delete hash[id];
    } else {
      hash[id] = $el[id].value;
    }
    log(hash);
    out = [];
    for (k in hash) {
      v = hash[k];
      out.push(encodeURIComponent(k + '_' + encodeURIComponent(v)));
    }
    return window.location.hash = out.join('&');
  };

  p = {};

  $el = {};

  l = {};

  c = {};

  window.shapes = s = {};

  window.addEventListener('load', function() {});

  c._defaults = [[53, 0, 76, 'Z0'], [255, 255, 160, 'Z1'], [25, 0, 82, 'Y0'], [61, 0, 173, 'Y1'], [108, 24, 249, 'Y2'], [134, 110, 255, 'Y3'], [0, 82, 88, 'X1'], [0, 117, 95, 'X2'], [0, 194, 140, 'X3'], [0, 229, 196, 'X4'], [0, 103, 217, 'W2'], [0, 159, 248, 'W3'], [0, 199, 255, 'W4'], [140, 228, 255, 'W5'], [0, 129, 17, 'V2'], [0, 191, 59, 'V3'], [0, 226, 95, 'V4'], [94, 244, 141, 'V5'], [242, 128, 0, 'U3'], [255, 175, 45, 'U4'], [255, 209, 121, 'U5'], [255, 234, 195, 'U6'], [0, 171, 194, 'T3'], [0, 215, 225, 'T4'], [98, 239, 241, 'T5'], [189, 248, 248, 'T6'], [128, 216, 0, 'S4'], [183, 240, 85, 'S5'], [213, 246, 159, 'S6'], [226, 255, 206, 'S7'], [255, 181, 162, 'R5'], [255, 223, 214, 'R6'], [255, 243, 238, 'R7'], [255, 249, 108, 'Q6'], [255, 254, 185, 'Q7'], [255, 218, 237, 'P6'], [255, 240, 251, 'P7']];

  window.addEventListener('load', function() {
    var i, loadedTextures, src, _i, _j, _len, _results;
    loadedTextures = [];
    for (i = _i = 0; _i <= 7; i = ++_i) {
      loadedTextures.push('shapes/shape-1/shape-1-f' + i + '.png');
    }
    l._waiting = loadedTextures.length;
    _results = [];
    for (i = _j = 0, _len = loadedTextures.length; _j < _len; i = ++_j) {
      src = loadedTextures[i];
      _results.push(new LoadedTexture({
        id: "loaded-texture-" + i,
        src: src,
        width: 128,
        height: 128
      }));
    }
    return _results;
  });

  window.addEventListener('textures-ready', function() {
    new Pram({
      id: 'bgStart',
      type: 'color',
      "default": '#7bec71',
      update: function(evt) {
        return $('body').style.backgroundImage = "linear-gradient(180deg, " + p.bgStart + ", " + p.bgEnd + ")";
      }
    });
    new Pram({
      id: 'bgEnd',
      type: 'color',
      "default": '#0d834a',
      update: function() {
        return $('body').style.backgroundImage = "linear-gradient(180deg, " + p.bgStart + ", " + p.bgEnd + ")";
      }
    });
    new Pram({
      id: 'xExtent',
      type: 'range',
      min: 1,
      max: 30,
      "default": 2,
      update: amendShapes
    });
    new Pram({
      id: 'yExtent',
      type: 'range',
      min: 1,
      max: 30,
      "default": 2,
      update: amendShapes
    });
    new Pram({
      id: 'zExtent',
      type: 'range',
      min: 1,
      max: 30,
      "default": 1,
      update: amendShapes
    });
    new Pram({
      id: 'speed',
      type: 'range',
      min: 1,
      max: 30,
      "default": 12,
      update: function() {}
    });
    return new Pram({
      id: 'duration',
      type: 'range',
      min: 100,
      max: 2000,
      "default": 500,
      update: function() {}
    });
  });

  window.addEventListener('load', function() {
    log('Booting...', false);
    $el.container = $('#container');
    $el.colorPalette = $('#colorPalette');
    return construct();
  });

  amendColors = function() {
    var b, g, i, id, r, _i, _len, _ref, _ref1, _results;
    if (c._instances) {
      i = c._instances.length;
      while (--i) {
        c._instances[i].destruct();
        c._instances.splice(i, 1);
      }
    }
    _ref = c._defaults;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], r = _ref1[0], g = _ref1[1], b = _ref1[2], id = _ref1[3];
      _results.push(new Color({
        r: r,
        g: g,
        b: b,
        id: id
      }));
    }
    return _results;
  };

  amendShapes = function() {
    var i, shape, x, y, z, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4;
    if (s._shapes) {
      i = s._shapes.length;
      while (--i) {
        shape = s._shapes[i];
        _ref = shape.id.split('-'), x = _ref[0], y = _ref[1], z = _ref[2];
        if (x >= p.xExtent || y >= p.yExtent || z >= p.zExtent) {
          shape.destruct();
          s._shapes.splice(i, 1);
        }
      }
    }
    for (x = _i = 0, _ref1 = p.xExtent - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
      for (y = _j = 0, _ref2 = p.yExtent - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; y = 0 <= _ref2 ? ++_j : --_j) {
        for (z = _k = 0, _ref3 = p.zExtent - 1; 0 <= _ref3 ? _k <= _ref3 : _k >= _ref3; z = 0 <= _ref3 ? ++_k : --_k) {
          if (!((_ref4 = s._shapeLut) != null ? _ref4[x + '-' + y + '-' + z] : void 0)) {
            new Shape({
              x: x,
              y: y,
              z: z
            });
          }
        }
      }
    }
    if (s._$container) {
      return s._$container.setAttribute('translation', "-" + (p.xExtent / 2) + " -" + (p.yExtent / 2) + " -" + (p.zExtent / 2));
    }
  };

  construct = function() {
    log('Constructing...');
    amendColors();
    return amendShapes();
  };

  window.addEventListener('load', function() {
    var count, jump;
    count = 1;
    return jump = function() {
      var shape, _i, _len, _ref;
      if (0 === count % 12) {
        _ref = s._shapes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          shape = _ref[_i];
          shape.$shape.removeChild(shape.$appearance);
          shape.$appearance = make('appearance', {
            use: 'loaded-texture-' + (count % (8 * 12) / 12)
          });
          shape.$shape.appendChild(shape.$appearance);
        }
      }
      count = count + 1;
      if (2000 > count) {
        return window.requestAnimationFrame(jump);
      }
    };
  });

  Pram = (function() {
    function Pram(opt) {
      this.valueOf = __bind(this.valueOf, this);
      this.reset = __bind(this.reset, this);
      this.initPObject();
      this.parseOptions(opt);
      this.recordInstance();
      this.overrideDefault();
      this.update();
      this.validateDOM();
      this.buildResetAllBtn();
      this.buildElement();
    }

    Pram.prototype.initPObject = function() {
      if ('object' !== typeof p) {
        throw "Please define a `p` object in application scope, I.E. `p = {}`, before calling `new Pram()`";
      }
      if (p._prams == null) {
        p._prams = [];
      }
      return p._pramLut != null ? p._pramLut : p._pramLut = {};
    };

    Pram.prototype.parseOptions = function(opt) {
      this.id = this.validId(opt.id);
      this.type = this.validType(opt.type);
      this.min = this.validMinmax(opt.min);
      this.max = this.validMinmax(opt.max);
      this["default"] = this.validValue(opt["default"]);
      return this.update = this.validUpdate(opt.update);
    };

    Pram.prototype.recordInstance = function() {
      p._prams.push(this);
      p._pramLut[this.id] = this;
      return Object.defineProperty(p, this.id, {
        get: this.valueOf
      });
    };

    Pram.prototype.overrideDefault = function() {
      var fragValue;
      return this.set((fragValue = this.parseFragment()[this.id]) ? fragValue : this["default"]);
    };

    Pram.prototype.types = {
      color: /^#[a-f0-9]{6}$/i,
      text: /^[a-z]{0,24}$/,
      range: /^[0-9.]+$/,
      id: /^[a-z][A-Za-z0-9]{0,11}$/
    };

    Pram.prototype.validId = function(id) {
      if ('string' !== typeof id) {
        throw "`id` is type '" + (typeof id) + "', not 'string'";
      }
      if (!this.types.id.test(id)) {
        throw "`id` '" + id + "' fails " + this.types.id.test;
      }
      if (p[id]) {
        throw "Duplicate `id` '" + id + "'";
      }
      return id;
    };

    Pram.prototype.validType = function(type) {
      if ('string' !== typeof type) {
        throw "`type` is type '" + (typeof type) + "', not 'string'";
      }
      if (!this.types[type]) {
        throw "`type` '" + type + "' not recognized";
      }
      return type;
    };

    Pram.prototype.validMinmax = function(minmax) {
      if ('range' !== this.type) {
        return null;
      }
      if ('number' !== typeof minmax) {
        throw "`min` or `max` is type '" + (typeof minmax) + "', not 'number'";
      }
      return minmax;
    };

    Pram.prototype.validValue = function(value) {
      value += '';
      if (!this.types[this.type].test(value)) {
        throw "value '" + value + "' fails " + this.types[this.type];
      }
      return value;
    };

    Pram.prototype.validUpdate = function(update) {
      if ('function' !== typeof update) {
        throw "`update` is type '" + (typeof update) + "', not 'function'";
      }
      return update;
    };

    Pram.prototype.validateDOM = function() {
      if ('complete' !== document.readyState) {
        throw "`document.readyState` is currently '" + document.readyState + "'. Please wait for 'complete', eg using `window.addEventListener('load', ...)`";
      }
      if (!p._$container) {
        p._$container = $('#pram');
        if (!p._$container) {
          throw "Cannot find the `#pram` container element on the page. Please add an HTML element like `<fieldset id=\"pram\"></fieldset>`";
        }
      }
      if ($('#' + this.id)) {
        throw "An element with id '\#" + this.id + "' already exists on the page. Please remove the element, or change the id string '" + this.id + "' to something else";
      }
    };

    Pram.prototype.buildResetAllBtn = function() {
      if (!p._$resetAll) {
        p._$resetAll = make('a', {
          "class": 'button'
        }, 'Reset All');
        p._$resetAll.addEventListener('click', function() {
          var parameter, _i, _len, _ref, _results;
          _ref = p._prams;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            parameter = _ref[_i];
            _results.push(parameter.reset());
          }
          return _results;
        });
        return p._$container.appendChild(p._$resetAll);
      }
    };

    Pram.prototype.buildElement = function() {
      var attr;
      attr = {
        value: this.value,
        type: this.type
      };
      if (null !== this.min) {
        attr.min = this.min;
      }
      if (null !== this.max) {
        attr.max = this.max;
      }
      this.$label = make('label', {}, "<b>" + this.id + "</b>");
      this.$value = make('span', {}, this.value);
      this.$default = make('a', {}, this["default"]);
      this.$default.addEventListener('click', this.reset);
      this.$input = make('input', attr);
      this.$input.addEventListener('input', (function(_this) {
        return function(evt) {
          _this.set(evt.target.value);
          _this.setFragment();
          _this.$value.innerHTML = _this.value;
          return _this.update();
        };
      })(this));
      this.$label.appendChild(this.$value);
      this.$label.appendChild(this.$default);
      this.$label.appendChild(this.$input);
      return p._$container.appendChild(this.$label);
    };

    Pram.prototype.parseFragment = function() {
      var fragment, k, kv, v, _i, _len, _ref, _ref1;
      fragment = {};
      _ref = (window.location.hash.substr(1)).split('&');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kv = _ref[_i];
        _ref1 = kv.split('_'), k = _ref1[0], v = _ref1[1];
        if (p._pramLut[k]) {
          fragment[k] = decodeURIComponent(v);
        }
      }
      return fragment;
    };

    Pram.prototype.setFragment = function() {
      var k, obj, out, v;
      return;
      obj = this.parseFragment();
      if (this["default"] === this.value) {
        delete obj[this.id];
      } else {
        obj[this.id] = this.value;
      }
      out = (function() {
        var _results;
        _results = [];
        for (k in obj) {
          v = obj[k];
          _results.push((function() {
            return "" + k + "_" + v;
          })());
        }
        return _results;
      })();
      return window.location.hash = out.join('&');
    };

    Pram.prototype.reset = function(evt) {
      this.set(this["default"]);
      this.$input.value = this["default"];
      this.setFragment();
      this.update();
      return evt != null ? evt.preventDefault() : void 0;
    };

    Pram.prototype.set = function(value) {
      return this.value = this.validValue(value);
    };

    Pram.prototype.valueOf = function() {
      return this.value;
    };

    return Pram;

  })();

  Color = (function() {
    function Color(opt) {
      this.initObject();
      this.parseOptions(opt);
      this.recordInstance();
      this.validateDOM();
      this.buildElement();
    }

    Color.prototype.initObject = function() {
      if ('object' !== typeof c) {
        throw "Please define a `c` object in application scope, I.E. `c = {}`, before calling `new Color()`";
      }
      if (c._instances == null) {
        c._instances = [];
      }
      return c._instanceLut != null ? c._instanceLut : c._instanceLut = {};
    };

    Color.prototype.parseOptions = function(opt) {
      this.id = this.validId(opt.id);
      this.r = this.validChannel(opt, 'r');
      this.g = this.validChannel(opt, 'g');
      this.b = this.validChannel(opt, 'b');
      return this.hex = this.channelsToHex(this.r, this.g, this.b);
    };

    Color.prototype.recordInstance = function() {
      c._instances.push(this);
      return c._instanceLut[this.id] = this;
    };

    Color.prototype.validId = function(id) {
      var idrx;
      idrx = /^[O-Z][0-9]$/;
      if ('string' !== typeof id) {
        throw "Color `id` is type '" + (typeof id) + "', not 'string'";
      }
      if (!idrx.test(id)) {
        throw "Color `id` '" + id + "' fails " + idrx;
      }
      if (c._instanceLut[id]) {
        throw "Duplicate Color `id` '" + id + "'";
      }
      return id;
    };

    Color.prototype.validChannel = function(opt, name) {
      var channel;
      channel = opt[name];
      if ('undefined' === typeof channel) {
        throw "Channel `" + name + "` of Color `" + this.id + "` is missing";
      }
      if ('number' !== typeof channel) {
        throw "Channel `" + name + "` of Color `" + this.id + "` has type '" + (typeof channel) + "' not 'number'";
      }
      if (!((0 <= channel && channel <= 255))) {
        throw "Channel `" + name + "` of Color `" + this.id + "` is `" + channel + "`, which is out of range (must be 0 to 255)";
      }
      if (channel % 1) {
        throw "Channel `" + name + "` of Color `" + this.id + "` is `" + channel + "`, which is not an integer";
      }
      return channel;
    };

    Color.prototype.channelsToHex = function(r, g, b) {
      return '#' + (this.channelToHex(r)) + (this.channelToHex(g)) + (this.channelToHex(b));
    };

    Color.prototype.channelToHex = function(channel) {
      return (16 >= channel ? '0' : '') + channel.toString(16);
    };

    Color.prototype.validateDOM = function() {
      if ('complete' !== document.readyState) {
        throw "`document.readyState` is currently '" + document.readyState + "'. Please wait for 'complete', eg using `window.addEventListener('load', ...)`";
      }
      if (!c._$container) {
        c._$container = $('#colors');
        if (!c._$container) {
          throw "Cannot find the `#colors` container element on the page. Please add an HTML element like `<group id=\"colors\"></group>`";
        }
      }
    };

    Color.prototype.buildElement = function() {
      this.$a = make('appearance', {
        def: this.id
      });
      this.$a.appendChild(make('material', {
        diffuseColor: this.hex
      }));
      return c._$container.appendChild(this.$a);
    };

    Color.prototype.destruct = function() {
      empty(this.t);
      if (this.t.parentNode === s._$container) {
        s._$container.removeChild(this.t);
      }
      return delete c._instanceLut[this.id];
    };

    return Color;

  })();

  LoadedTexture = (function() {
    function LoadedTexture(opt) {
      this.initObject();
      this.parseOptions(opt);
      this.recordInstance();
      this.validateDOM();
      this.buildElement();
      this.beginLoad();
    }

    LoadedTexture.prototype.initObject = function() {
      if ('object' !== typeof c) {
        throw "Please define an `l` object in application scope, I.E. `l = {}`, before calling `new LoadedTexture()`";
      }
      if (l._instances == null) {
        l._instances = [];
      }
      return l._instanceLut != null ? l._instanceLut : l._instanceLut = {};
    };

    LoadedTexture.prototype.parseOptions = function(opt) {
      this.id = this.validId(opt.id);
      this.src = this.validSrc(opt.src);
      this.width = this.validExtent(opt, 'width');
      return this.height = this.validExtent(opt, 'height');
    };

    LoadedTexture.prototype.recordInstance = function() {
      l._instances.push(this);
      return l._instanceLut[this.id] = this;
    };

    LoadedTexture.prototype.validId = function(id) {
      var idrx;
      idrx = /^[a-z][-a-z0-9]+$/;
      if ('string' !== typeof id) {
        throw "LoadedTexture `id` is type '" + (typeof id) + "', not 'string'";
      }
      if (!idrx.test(id)) {
        throw "LoadedTexture `id` '" + id + "' fails " + idrx;
      }
      if (l._instanceLut[id]) {
        throw "Duplicate LoadedTexture `id` '" + id + "'";
      }
      return id;
    };

    LoadedTexture.prototype.validSrc = function(src) {
      var srcrx;
      srcrx = /^[a-z][-/a-z0-9]+\.png$/;
      if ('undefined' === typeof src) {
        throw "`src` of LoadedTexture `" + this.id + "` is missing";
      }
      if ('string' !== typeof src) {
        throw "`src` of LoadedTexture `" + this.id + "` has type '" + (typeof src) + "' not 'string'";
      }
      if (!srcrx.test(src)) {
        throw "LoadedTexture `src` '" + src + "' fails " + srcrx;
      }
      return src;
    };

    LoadedTexture.prototype.validExtent = function(opt, name) {
      var extent;
      extent = opt[name];
      if ('undefined' === typeof extent) {
        throw "`" + name + "` of LoadedTexture `" + this.id + "` is missing";
      }
      if ('number' !== typeof extent) {
        throw "`" + name + "` of LoadedTexture `" + this.id + "` has type '" + (typeof extent) + "' not 'number'";
      }
      if (extent % 1) {
        throw "`" + name + "` of LoadedTexture `" + this.id + "` is `" + extent + "`, which is not an integer";
      }
      if (1 > extent) {
        throw ("`" + name + "` of LoadedTexture `" + this.id + "` is ") + (0 === extent ? 'zero' : 'negative');
      }
      if (extent & (extent - 1)) {
        throw "`" + name + "` of LoadedTexture `" + this.id + "` is `" + extent + "`, which is not a power of two (must be 1, 2, 4 ... 256, etc)";
      }
      return extent;
    };

    LoadedTexture.prototype.validateDOM = function() {
      if ('complete' !== document.readyState) {
        throw "`document.readyState` is currently '" + document.readyState + "'. Please wait for 'complete', eg using `window.addEventListener('load', ...)`";
      }
      if (!l._$container) {
        l._$container = $('#loaded-textures');
        if (!l._$container) {
          throw "Cannot find the `#loaded-textures` container element on the page. Please add an HTML element like `<group id=\"loaded-textures\"></group>`";
        }
      }
    };

    LoadedTexture.prototype.buildElement = function() {
      this.$a = make('appearance', {
        def: this.id
      });
      this.$t = make('texture', {
        hideChildren: 'true'
      });
      this.$c = make('canvas', {
        width: this.width,
        height: this.height
      });
      this.ctx = this.$c.getContext('2d');
      this.$t.appendChild(this.$c);
      this.$a.appendChild(this.$t);
      return l._$container.appendChild(this.$a);
    };

    LoadedTexture.prototype.beginLoad = function() {
      this.$s = new Image();
      this.$s.addEventListener('load', (function(_this) {
        return function() {
          log(_this.src + ' is loaded');
          _this.ctx.drawImage(_this.$s, 0, 0);
          l._waiting--;
          if (!l._waiting) {
            log('all done!');
            return window.dispatchEvent(new Event('textures-ready'));
          }
        };
      })(this));
      return this.$s.src = this.src;
    };

    LoadedTexture.prototype.destruct = function() {
      return log('destruct ' + this.id);
    };

    return LoadedTexture;

  })();

  Shape = (function() {
    function Shape(opt) {
      this.clicked = __bind(this.clicked, this);
      this.initSObject();
      this.parseOptions(opt);
      this.recordInstance();
      this.validateDOM();
      this.buildElement();
    }

    Shape.prototype.initSObject = function() {
      if ('object' !== typeof s) {
        throw "Please define an `s` object in application scope, I.E. `s = {}`, before calling `new Shape()`";
      }
      if (s._shapes == null) {
        s._shapes = [];
      }
      return s._shapeLut != null ? s._shapeLut : s._shapeLut = {};
    };

    Shape.prototype.parseOptions = function(opt) {
      this.x = this.validCoord(opt, 'x');
      this.y = this.validCoord(opt, 'y');
      this.z = this.validCoord(opt, 'z');
      return this.id = this.validId("" + this.x + "-" + this.y + "-" + this.z);
    };

    Shape.prototype.recordInstance = function() {
      s._shapes.push(this);
      return s._shapeLut[this.id] = this;
    };

    Shape.prototype.validCoord = function(opt, name) {
      var coord;
      coord = opt[name];
      if ('undefined' === typeof coord) {
        throw "Coord `" + name + "` is missing";
      }
      if ('number' !== typeof coord) {
        throw "Coord `" + name + "` has type '" + (typeof coord) + "' not 'number'";
      }
      return coord;
    };

    Shape.prototype.validId = function(id) {
      if (s._shapeLut[id]) {
        throw "Duplicate Shape `id` '" + id + "'";
      }
      return id;
    };

    Shape.prototype.validateDOM = function() {
      if ('complete' !== document.readyState) {
        throw "`document.readyState` is currently '" + document.readyState + "'. Please wait for 'complete', eg using `window.addEventListener('load', ...)`";
      }
      if (!s._$container) {
        s._$container = $('#shapes');
        if (!s._$container) {
          throw "Cannot find the `#shapes` container element on the page. Please add an HTML element like `<transform id=\"shapes\"></transform>`";
        }
      }
    };

    Shape.prototype.buildElement = function() {
      var bb, x, y, z;
      x = this.x + (this.y % 2 ? .5 : 0);
      y = this.y;
      z = this.z;
      this.t = make('transform', {
        translation: "" + x + " " + y + " " + z
      });
      this.$shape = make('shape', {
        onclick: "window.shapes._shapeLut['" + this.x + "-" + this.y + "-" + this.z + "'].clicked()"
      });
      if (!c._instances) {
        log("`c._instances` does not exist!");
      } else {
        this.colorIndex = (Math.floor(Math.random() * l._instances.length * ((this.x / p.xExtent) + (this.z / p.zExtent)) / 2)) - 1;
        this.colorIndex = 0;
        this.$appearance = make('appearance', {
          use: 'loaded-texture-' + this.colorIndex
        });
        this.$shape.appendChild(this.$appearance);
      }
      this.$shape.appendChild(make('plane', {
        use: 'small-plane'
      }));
      bb = make('billboard', {
        axisofrotation: '0 0 0'
      });
      bb.appendChild(this.$shape);
      this.t.appendChild(bb);
      return s._$container.appendChild(this.t);
    };

    Shape.prototype.count = 0;

    Shape.prototype.clicked = function() {
      if (0 === this.count % p.speed) {
        this.$shape.removeChild(this.$appearance);
        this.$appearance = make('appearance', {
          use: 'loaded-texture-' + (this.count % (8 * p.speed) / p.speed)
        });
        this.$shape.appendChild(this.$appearance);
      }
      this.count = this.count + 1;
      if (p.duration > this.count) {
        return window.requestAnimationFrame(this.clicked);
      } else {
        return this.count = 0;
      }
    };

    Shape.prototype.destruct = function() {
      empty(this.t);
      if (this.t.parentNode === s._$container) {
        s._$container.removeChild(this.t);
      }
      return delete s._shapeLut[this.id];
    };

    return Shape;

  })();

}).call(this);
